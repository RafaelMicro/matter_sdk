#!/bin/bash
#
#  Copyright (c) 2021, 2023, The OpenThread Authors.
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are met:
#  1. Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#  3. Neither the name of the copyright holder nor the
#     names of its contributors may be used to endorse or promote products
#     derived from this software without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#  POSSIBILITY OF SUCH DAMAGE.
#

set -exo pipefail

OT_CMAKE_NINJA_TARGET=${OT_CMAKE_NINJA_TARGET:-}

MFG_VENDOR_FLAG="not_defined"
NXP_VENDOR_FLAG="not_defined"

readonly OT_SRCDIR="$(pwd)"
readonly OT_OPTIONS_RCP_LIBS_ONLY_SPI=(
    "-DCMAKE_TOOLCHAIN_FILE=src/iwx12/arm-none-eabi.cmake"
    "-DCMAKE_BUILD_TYPE=MinSizeRel"
    "-DOT_PLATFORM=external"
    "-DOT_APP_CLI=OFF"
    "-DOT_APP_NCP=OFF"
    "-DOT_APP_RCP=OFF"
    "-DOT_FTD=OFF"
    "-DOT_MTD=OFF"
    "-DOT_RCP=ON"
    #"-DOT_BUILTIN_MBEDTLS_MANAGEMENT=OFF"
    #"-DOT_EXTERNAL_MBEDTLS=nxp-iwx12-mbedtls"
    "-DOT_NCP_SPI=ON"
)
readonly OT_OPTIONS_RCP_LIBS_ONLY_UART_FLOW_CONTROL=(
    "-DCMAKE_TOOLCHAIN_FILE=src/iwx12/arm-none-eabi.cmake"
    "-DCMAKE_BUILD_TYPE=MinSizeRel"
    "-DOT_PLATFORM=external"
    "-DOT_APP_CLI=OFF"
    "-DOT_APP_NCP=OFF"
    "-DOT_APP_RCP=OFF"
    "-DOT_FTD=OFF"
    "-DOT_MTD=OFF"
    "-DOT_RCP=ON"
    #"-DOT_BUILTIN_MBEDTLS_MANAGEMENT=OFF"
    #"-DOT_EXTERNAL_MBEDTLS=nxp-iwx12-mbedtls"
)

readonly OT_OPTIONS_RCP_LIBS_MFG=(
    "-DOT_NCP_VENDOR_HOOK_SOURCE_DIR=${OT_SRCDIR}/src/iwx12/"
    "-DOT_NCP_VENDOR_HOOK_SOURCE=iwx12_vendor_hook.cpp"
)

readonly OT_OPTIONS_RCP_LIBS_NXP_HOOK=(
    "-DOPENTHREAD_15_4_INDEPENDENT_RESET_ENABLE=1"
    "-DOT_NCP_VENDOR_HOOK_SOURCE_DIR=${OT_SRCDIR}/src/iwx12/"
    "-DOT_NCP_VENDOR_HOOK_SOURCE=iwx12_vendor_hook.cpp"
)

build()
{
    local builddir="${OT_CMAKE_BUILD_DIR:-build_iwx12}"
    local cmakeArgs=("${@}")
    mkdir -p "${builddir}"
    cd "${builddir}"
    if [ ! "$1" = "folder_not_specified" ]; then
        cmakeArgs=("${@:2}")
        rcp_folder_name="$1"
        mkdir -p "${rcp_folder_name}"
        cd "${rcp_folder_name}"
    fi

    # shellcheck disable=SC2068
    cmake -GNinja -DOT_NXP_PLATFORM=iwx12 -DOT_COMPILE_WARNING_AS_ERROR=ON ${cmakeArgs[@]} "${OT_SRCDIR}"

    if [[ -n ${OT_CMAKE_NINJA_TARGET[*]} ]]; then
        ninja "${OT_CMAKE_NINJA_TARGET[@]}"
    else
        ninja
    fi

    cd "${OT_SRCDIR}"
}

copy_libraries()
{
    #Copy libraries
    cp ./build_iwx12/"$2"/lib/libopenthread-platform-utils-static.a "${NXP_IWX12_SDK_ROOT}"/src/ffu/openthread/lib/"$1"/libopenthread-platform-utils.a
    cp ./build_iwx12/"$2"/lib/libopenthread-platform.a "${NXP_IWX12_SDK_ROOT}"/src/ffu/openthread/lib/"$1"
    cp ./build_iwx12/"$2"/lib/libopenthread-radio.a "${NXP_IWX12_SDK_ROOT}"/src/ffu/openthread/lib/"$1"
    cp ./build_iwx12/"$2"/lib/libmbedcrypto.a "${NXP_IWX12_SDK_ROOT}"/src/ffu/openthread/lib/"$1"
    cp ./build_iwx12/"$2"/lib/libopenthread-rcp.a "${NXP_IWX12_SDK_ROOT}"/src/ffu/openthread/lib/"$1"
    cp ./build_iwx12/"$2"/lib/libopenthread-spinel-rcp.a "${NXP_IWX12_SDK_ROOT}"/src/ffu/openthread/lib/"$1"
    cp ./build_iwx12/"$2"/lib/libopenthread-hdlc.a "${NXP_IWX12_SDK_ROOT}"/src/ffu/openthread/lib/"$1"
}

build_ot_rcp_libs_only_uart_flow_control()
{
    echo "Building OT RCP libs with UART with flow control..."
    local options=("ot_rcp_libs_only_uart_flow_control")
    options+=("-DOT_PACKAGE_VERSION=$1")
    options+=("${OT_OPTIONS_RCP_LIBS_ONLY_UART_FLOW_CONTROL[@]}")
    if [ "${MFG_VENDOR_FLAG}" == 'ot_rcp_libs_with_mfg' ]; then
        options+=("${OT_OPTIONS_RCP_LIBS_MFG[@]}")
    elif [ "${NXP_VENDOR_FLAG}" == 'ot_rcp_libs_with_nxp_hook' ]; then
        options+=("${OT_OPTIONS_RCP_LIBS_NXP_HOOK[@]}")
    fi
    build "${options[@]}"

    if [ $? -eq 1 ]; then
        exit 1
    fi
    copy_libraries ncp_uart ot_rcp_libs_only_uart_flow_control
}

build_ot_rcp_libs_only_spi()
{
    echo "Building OT RCP libs with SPI..."
    local options=("ot_rcp_libs_only_spi")
    options+=("-DOT_PACKAGE_VERSION=$1")
    options+=("${OT_OPTIONS_RCP_LIBS_ONLY_SPI[@]}")
    if [ "${MFG_VENDOR_FLAG}" == 'ot_rcp_libs_with_mfg' ]; then
        options+=("${OT_OPTIONS_RCP_LIBS_MFG[@]}")
    elif [ "${NXP_VENDOR_FLAG}" == 'ot_rcp_libs_with_nxp_hook' ]; then
        options+=("${OT_OPTIONS_RCP_LIBS_NXP_HOOK[@]}")
    fi

    build "${options[@]}"

    if [ $? -eq 1 ]; then
        exit 1
    fi
    copy_libraries ncp_spi ot_rcp_libs_only_spi
}

create_directory_and_build()
{
    if [ "$1" == 'all' ]; then
        build_ot_rcp_libs_only_uart_flow_control "$2"
        build_ot_rcp_libs_only_spi "$2"
    elif [ "$1" == 'ot_rcp_libs_only_uart_flow_control' ]; then
        build_ot_rcp_libs_only_uart_flow_control $2
    elif [ "$1" == 'ot_rcp_libs_only_spi' ]; then
        build_ot_rcp_libs_only_spi "$2"
    elif [ "$1" == 'ot_rcp_libs_with_mfg' ]; then
        MFG_VENDOR_FLAG='ot_rcp_libs_with_mfg'
        build_ot_rcp_libs_only_spi "$2"
        build_ot_rcp_libs_only_uart_flow_control "$2"
    elif [ "$1" == 'ot_rcp_libs_with_nxp_hook' ]; then
        NXP_VENDOR_FLAG='ot_rcp_libs_with_nxp_hook'
        build_ot_rcp_libs_only_spi "$2"
        build_ot_rcp_libs_only_uart_flow_control "$2"
    else
        echo >&2 "Unsupported action: $1. Supported: all, ot_rcp_libs_only_uart_flow_control, ot_rcp_libs_only_spi, ot_rcp_libs_with_mfg, ot_rcp_libs_with_nxp_hook"
        # 128 for Invalid arguments
        exit 128
    fi
}

main()
{

    # check if environmental variable NXP_IWX12_SDK_ROOT is set

    if [ -z "$NXP_IWX12_SDK_ROOT" ]; then
        echo "Could not found a valid SDK for NXP_IWX12_SDK_ROOT!"
        exit 1
    fi

    echo "NXP_IWX12_SDK_ROOT set to " "$NXP_IWX12_SDK_ROOT"

    if [ $# == 0 ]; then
        create_directory_and_build all
    else
        create_directory_and_build "$@"
    fi

}

main "$@"
