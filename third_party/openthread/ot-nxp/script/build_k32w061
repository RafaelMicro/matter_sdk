#!/bin/bash
#
#  Copyright (c) 2021, The OpenThread Authors.
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are met:
#  1. Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#  3. Neither the name of the copyright holder nor the
#     names of its contributors may be used to endorse or promote products
#     derived from this software without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#  POSSIBILITY OF SUCH DAMAGE.
#

set -exo pipefail

OT_CMAKE_NINJA_TARGET=${OT_CMAKE_NINJA_TARGET:-}
BUILD_DIR="${OT_CMAKE_BUILD_DIR:-build_k32w061}"

OT_SRCDIR="$(pwd)"
readonly OT_SRCDIR

OT_OPTIONS=(
    "-DBUILD_TESTING=OFF"
    "-DCMAKE_TOOLCHAIN_FILE=cmake/toolchain/arm-none-eabi.cmake"
    "-DCMAKE_BUILD_TYPE=MinSizeRel"
    "-DOT_PLATFORM=external"
    "-DOT_SLAAC=ON"
    "-DOT_NXP_PLATFORM_FAMILY=k32w0"
    "-DOT_NXP_PLATFORM=k32w061"
)
readonly OT_OPTIONS

OT_OPTIONS_RCP_ONLY_UART_FLOW_CONTROL=(
    "-DOT_RCP_FLOW_CONTROL=ON"
    "-DOT_APP_CLI=OFF"
    "-DOT_FTD=OFF"
    "-DOT_MTD=OFF"
    "-DUART_BAUD_RATE=1000000"
)
readonly OT_OPTIONS_RCP_ONLY_UART_FLOW_CONTROL

OT_OPTIONS_RCP_ONLY_SPI=(
    "-DOT_NCP_SPI=ON"
    "-DOT_APP_CLI=OFF"
    "-DOT_FTD=OFF"
    "-DOT_MTD=OFF"
)
readonly OT_OPTIONS_RCP_ONLY_SPI

OT_OPTIONS_NO_RCP=(
    "-DOT_APP_NCP=OFF"
    "-DOT_APP_RCP=OFF"
    "-DOT_RCP=OFF"
    "-DOT_MAC_CSL_RECEIVER_ENABLE=ON"
)
readonly OT_OPTIONS_NO_RCP

OT_OPTIONS_RCP_HCI_BB_SINGLE_UART_FC=(
    "-DOT_APP_CLI=OFF"
    "-DOT_APP_RCP=OFF"
    "-DOT_APP_NCP=OFF"
    "-DOT_FTD=OFF"
    "-DOT_MTD=OFF"
    "-DOT_BLE_SUPPORT=ON"
    "-DOT_APP_RCP_BLE_HCI_BB=ON"
    "-DOT_NCP_VENDOR_HOOK_SOURCE_DIR=${OT_SRCDIR}/src/k32w0/platform/"
    "-DOT_NCP_VENDOR_HOOK_SOURCE=nxp_vendor_hook.cpp"
    "-DOT_APP_RCP_BLE_HCI_BB_SINGLE_UART=ON"
    "-DUART_BAUD_RATE=1000000"
)
readonly OT_OPTIONS_RCP_HCI_BB_SINGLE_UART_FC

OT_OPTIONS_RCP_SPI_HCI_BB_UART_FC=(
    "-DOT_NCP_SPI=ON"
    "-DOT_APP_CLI=OFF"
    "-DOT_APP_RCP=OFF"
    "-DOT_APP_NCP=OFF"
    "-DOT_FTD=OFF"
    "-DOT_MTD=OFF"
    "-DOT_BLE_SUPPORT=ON"
    "-DOT_APP_RCP_BLE_HCI_BB=ON"
)
readonly OT_OPTIONS_RCP_SPI_HCI_BB_UART_FC

OT_OPTIONS_CLI_FTD_ZB_ED_RX_OFF=(
    "-DOT_NCP_SPI=OFF"
    "-DOT_APP_CLI=OFF"
    "-DOT_APP_RCP=OFF"
    "-DOT_APP_NCP=OFF"
    "-DOT_FTD=ON"
    "-DOT_MTD=OFF"
    "-DOT_BLE_SUPPORT=OFF"
    "-DOT_ZB_SUPPORT=ON"
    "-DOT_APP_FTD_ZB_ED_RX_OFF=ON"
    "-DOT_PING_SENDER=ON"
    "-DNO_THREAD_1_3_FLAGS=ON"
)
readonly OT_OPTIONS_CLI_FTD_ZB_ED_RX_OFF

OT_OPTIONS_RCP_UART_FC_ZB_ED_RX_OFF=(
    "-DOT_RCP_FLOW_CONTROL=ON"
    "-DOT_NCP_SPI=OFF"
    "-DOT_APP_CLI=OFF"
    "-DOT_APP_RCP=OFF"
    "-DOT_APP_NCP=OFF"
    "-DOT_FTD=OFF"
    "-DOT_MTD=OFF"
    "-DOT_BLE_SUPPORT=OFF"
    "-DOT_ZB_SUPPORT=ON"
    "-DOT_APP_RCP_UART_FC_ZB_ED_RX_OFF=ON"
    "-DUART_BAUD_RATE=1000000"
)
readonly OT_OPTIONS_RCP_UART_FC_ZB_ED_RX_OFF

OT_OPTIONS_RCP_UART_FC_BLE_HCI_BB_ZB_ED_RX_OFF=(
    "-DOT_RCP_FLOW_CONTROL=ON"
    "-DOT_NCP_SPI=OFF"
    "-DOT_APP_CLI=OFF"
    "-DOT_APP_RCP=OFF"
    "-DOT_APP_NCP=OFF"
    "-DOT_FTD=OFF"
    "-DOT_MTD=OFF"
    "-DOT_ZB_SUPPORT=ON"
    "-DOT_BLE_SUPPORT=ON"
    # "-DOT_APP_RCP_BLE_HCI_BB=ON"
    "-DOT_NCP_VENDOR_HOOK_SOURCE_DIR=${OT_SRCDIR}/src/k32w0/platform/"
    "-DOT_NCP_VENDOR_HOOK_SOURCE=nxp_vendor_hook.cpp"
    "-DOT_APP_RCP_UART_FC_BLE_HCI_BB_ZB_ED_RX_OFF=ON"
    "-DUART_BAUD_RATE=1000000"
)
readonly OT_OPTIONS_RCP_UART_FC_BLE_HCI_BB_ZB_ED_RX_OFF

OT_OPTIONS_RCP_ONLY_UART_DMA=(
    "-DOT_RCP_UART_DMA=ON"
    "-DOT_APP_CLI=OFF"
    "-DOT_FTD=OFF"
    "-DOT_MTD=OFF"
    "-DOT_1_2_SUPPORT=ON"
    "-DUART_BAUD_RATE=1000000"
)
readonly OT_OPTIONS_RCP_ONLY_UART_DMA

sign()
{
    if [ "$SDK_RELEASE" == "ON" ]; then
        "$NXP_K32W0_SDK_ROOT"/tools/imagetool/sign_images.sh "$1"
    else
        "$NXP_K32W0_SDK_ROOT"/middleware/wireless/openthread/boards/dk6_jn5189/enablement/sign_images.sh "$1" "$NXP_SIGN_ADDITIONAL_ARGS" "$NXP_K32W0_SDK_ROOT"/tools/imagetool
    fi
}

signGenerateHashAndCfile()
{
    for FILENAME in $1/*.elf; do
        python3 "$NXP_K32W0_SDK_ROOT"/tools/imagetool/dk6_image_tool.py -k $FILENAME
        arm-none-eabi-objcopy -O binary $FILENAME $FILENAME.bin
        xxd -i $FILENAME.bin >$FILENAME.bin.h
        sed -i "s/unsigned/const unsigned/g" $FILENAME.bin.h
        variableName=$(echo "$FILENAME.bin" | sed -e "s/\//\_/g" | sed -e "s/\-/\_/g" | sed -e "s/\./\_/g")
        echo ${variableName}
        sed -i "s/${variableName}/ot_rcp/g" $FILENAME.bin.h
    done
}

build()
{
    local cmakeArgs=("${@}")
    mkdir -p "${BUILD_DIR}"
    cd "${BUILD_DIR}"
    if [ ! "$1" = "folder_not_specified" ]; then
        cmakeArgs=("${@:2}")
        rcp_folder_name="$1"
        mkdir -p "${rcp_folder_name}"
        cd "${rcp_folder_name}"
    fi

    # shellcheck disable=SC2068
    cmake -GNinja -DOT_COMPILE_WARNING_AS_ERROR=ON -DOT_MBEDTLS_CONFIG_FILE=\"mbedtls-config.h\" ${cmakeArgs[@]} "${OT_SRCDIR}"

    if [[ -n ${OT_CMAKE_NINJA_TARGET[*]} ]]; then
        ninja "${OT_CMAKE_NINJA_TARGET[@]}"
    else
        ninja
    fi

    cd "${OT_SRCDIR}"
}

build_ot_rcp_only_uart_flow_control()
{
    echo "Building OT RCP image UART with flow control..."
    app_folder_name="rcp_only_uart_flow_control"
    local options=("${OT_OPTIONS_RCP_ONLY_UART_FLOW_CONTROL[@]}")
    options+=("${OT_OPTIONS[@]}")
    options+=("$@")
    options+=(" -DSDK_RELEASE=$SDK_RELEASE")
    build "${app_folder_name}" "${options[@]}"

    #Sign the image
    signGenerateHashAndCfile "${BUILD_DIR}/${app_folder_name}/bin"

    if [ $? -eq 1 ]; then
        exit 1
    fi

    echo "Building OT RCP image UART with flow control and PTA..."
    app_folder_name="rcp_only_uart_flow_control_pta"
    options+=("-DOT_BUILD_COEX=ON")
    options+=("-DOT_COMPILE_WARNING_AS_ERROR=OFF")
    build "${app_folder_name}" "${options[@]}"

    #Sign the image
    signGenerateHashAndCfile "${BUILD_DIR}/${app_folder_name}/bin"

    if [ $? -eq 1 ]; then
        exit 1
    fi
}

build_ot_rcp_only_spi()
{
    echo "Building OT RCP image SPI..."
    app_folder_name="rcp_only_spi"
    local options=("${app_folder_name}")
    options+=("${OT_OPTIONS_RCP_ONLY_SPI[@]}")
    options+=("${OT_OPTIONS[@]}")
    options+=("$@")
    options+=(" -DSDK_RELEASE=$SDK_RELEASE")
    build "${options[@]}"

    #Sign the image
    signGenerateHashAndCfile "${BUILD_DIR}/${app_folder_name}/bin"

    if [ $? -eq 1 ]; then
        exit 1
    fi
}

build_ot_without_rcp_image()
{
    echo "Building OT without RCP image ..."
    app_folder_name="folder_not_specified"
    local options=("${app_folder_name}")
    options+=("${OT_OPTIONS_NO_RCP[@]}")
    options+=("${OT_OPTIONS[@]}")
    options+=("$@")

    options+=(" -DSDK_RELEASE=$SDK_RELEASE")

    build "${options[@]}"

    #Sign the image
    sign "${BUILD_DIR}/bin"

    if [ $? -eq 1 ]; then
        exit 1
    fi
}

build_ot_rcp_ble_hci_bb_single_uart_fc()
{
    echo "Building dual mode app OT RCP + BLE HCI BB SINGLE UART FC..."
    app_folder_name="ot_rcp_ble_hci_bb_single_uart_fc"
    local options=("${OT_OPTIONS_RCP_HCI_BB_SINGLE_UART_FC[@]}")
    options+=("${OT_OPTIONS[@]}")
    options+=("$@")
    options+=(" -DSDK_RELEASE=$SDK_RELEASE")
    build "${app_folder_name}" "${options[@]}"

    signGenerateHashAndCfile "${BUILD_DIR}/${app_folder_name}/bin"

    if [ $? -eq 1 ]; then
        exit 1
    fi

    echo "Building dual mode app OT RCP + BLE HCI BB SINGLE UART FC and PTA ..."
    app_folder_name="ot_rcp_ble_hci_bb_single_uart_fc_pta"
    options+=("-DOT_BUILD_COEX=ON")
    #    options+=("-DOT_COMPILE_WARNING_AS_ERROR=OFF")
    build "${app_folder_name}" "${options[@]}"

    #Sign the image
    signGenerateHashAndCfile "${BUILD_DIR}/${app_folder_name}/bin"

    if [ $? -eq 1 ]; then
        exit 1
    fi
}

build_ot_rcp_spi_ble_hci_bb_uart_fc()
{
    echo "Building dual mode app OT RCP SPI + BLE HCI BB UART FC..."
    app_folder_name="ot_rcp_spi_ble_hci_bb_uart_fc"
    local options=("${app_folder_name}")
    options+=("${OT_OPTIONS_RCP_SPI_HCI_BB_UART_FC[@]}")
    options+=("${OT_OPTIONS[@]}")
    options+=("$@")
    options+=(" -DSDK_RELEASE=$SDK_RELEASE")
    build "${options[@]}"

    signGenerateHashAndCfile "${BUILD_DIR}/${app_folder_name}/bin"

    if [ $? -eq 1 ]; then
        exit 1
    fi
}

build_ot_cli_ftd_zb_ed_rx_off()
{
    echo "Building dual mode app OT CLI FTD + Zigbee ED RX OFF..."
    app_folder_name="ot_cli_ftd_zb_ed_rx_off"
    local options=("${app_folder_name}")
    options+=("${OT_OPTIONS_CLI_FTD_ZB_ED_RX_OFF[@]}")
    options+=("${OT_OPTIONS[@]}")
    options+=("$@")
    options+=(" -DSDK_RELEASE=$SDK_RELEASE")
    build "${options[@]}"

    sign "${BUILD_DIR}/${app_folder_name}/bin"

    arm-none-eabi-objcopy -v -O binary "${BUILD_DIR}/${app_folder_name}/bin/ot-cli-ftd-zb-ed-rx-off-k32w061.elf" "${BUILD_DIR}/${app_folder_name}/bin/ot-cli-ftd-zb-ed-rx-off-k32w061.bin"
    arm-none-eabi-objdump -d "${BUILD_DIR}/${app_folder_name}/bin/ot-cli-ftd-zb-ed-rx-off-k32w061.elf" >"${BUILD_DIR}/${app_folder_name}/bin/ot-cli-ftd-zb-ed-rx-off-k32w061.dis"

    if [ $? -eq 1 ]; then
        exit 1
    fi
}

build_ot_rcp_uart_fc_zb_ed_rx_off()
{
    echo "Building dual mode app OT RCP + Zigbee ED RX OFF"
    app_folder_name="ot_rcp_uart_fc_zb_ed_rx_off"
    local options=("${app_folder_name}")
    options+=("${OT_OPTIONS_RCP_UART_FC_ZB_ED_RX_OFF[@]}")
    options+=("${OT_OPTIONS[@]}")
    options+=("$@")
    options+=(" -DSDK_RELEASE=$SDK_RELEASE")
    build "${options[@]}"

    signGenerateHashAndCfile "${BUILD_DIR}/${app_folder_name}/bin"

    arm-none-eabi-objcopy -v -O binary "${BUILD_DIR}/${app_folder_name}/bin/ot-rcp-uart-fc-zb-ed-rx-off-k32w061.elf" "${BUILD_DIR}/${app_folder_name}/bin/ot-rcp-uart-fc-zb-ed-rx-off-k32w061.bin"
    arm-none-eabi-objdump -d "${BUILD_DIR}/${app_folder_name}/bin/ot-rcp-uart-fc-zb-ed-rx-off-k32w061.elf" >"${BUILD_DIR}/${app_folder_name}/bin/ot-rcp-uart-fc-zb-ed-rx-off-k32w061.dis"

    if [ $? -eq 1 ]; then
        exit 1
    fi
}

build_ot_rcp_uart_fc_ble_hci_bb_zb_ed_rx_off()
{
    echo "Building tri-mode app OT RCP + BLE BB + Zigbee ED RX OFF"
    app_folder_name="ot_rcp_uart_fc_ble_hci_bb_zb_ed_rx_off"
    local options=("${app_folder_name}")
    options+=("${OT_OPTIONS_RCP_UART_FC_BLE_HCI_BB_ZB_ED_RX_OFF[@]}")
    options+=("${OT_OPTIONS[@]}")
    options+=("$@")
    options+=(" -DSDK_RELEASE=$SDK_RELEASE")
    build "${options[@]}"

    signGenerateHashAndCfile "${BUILD_DIR}/${app_folder_name}/bin"

    arm-none-eabi-objcopy -v -O binary "${BUILD_DIR}/${app_folder_name}/bin/ot-rcp-uart-fc-ble-hci-bb-zb-ed-rx-off-k32w061.elf" "${BUILD_DIR}/${app_folder_name}/bin/ot-rcp-uart-fc-ble-hci-bb-zb-ed-rx-off-k32w061.bin"
    arm-none-eabi-objdump -d "${BUILD_DIR}/${app_folder_name}/bin/ot-rcp-uart-fc-ble-hci-bb-zb-ed-rx-off-k32w061.elf" >"${BUILD_DIR}/${app_folder_name}/bin/ot-rcp-uart-fc-ble-hci-bb-zb-ed-rx-off-k32w061.dis"

    if [ $? -eq 1 ]; then
        exit 1
    fi
}

build_ot_rcp_uart_fc_ble_hci_bb_zb_ed_rx_off_pta()
{
    echo "Building tri-mode app OT RCP + BLE BB + Zigbee ED RX OFF with PTA support"
    app_folder_name="ot_rcp_uart_fc_ble_hci_bb_zb_ed_rx_off_pta"
    local options=("${app_folder_name}")
    options+=("${OT_OPTIONS_RCP_UART_FC_BLE_HCI_BB_ZB_ED_RX_OFF[@]}")
    options+=("-DOT_BUILD_COEX=ON")
    options+=("${OT_OPTIONS[@]}")
    options+=("$@")
    options+=(" -DSDK_RELEASE=$SDK_RELEASE")
    build "${options[@]}"

    signGenerateHashAndCfile "${BUILD_DIR}/${app_folder_name}/bin"

    #move application files to the top
    # Since we're piggybacking on an example with a slightly different name, adjust the names of the generated files here
    mv "${BUILD_DIR}/${app_folder_name}/bin/ot-rcp-uart-fc-ble-hci-bb-zb-ed-rx-off-k32w061.elf" "${BUILD_DIR}/${app_folder_name}/bin/ot-rcp-uart-fc-ble-hci-bb-zb-ed-rx-off-pta-k32w061.elf"
    mv "${BUILD_DIR}/${app_folder_name}/bin/ot-rcp-uart-fc-ble-hci-bb-zb-ed-rx-off-k32w061.map" "${BUILD_DIR}/${app_folder_name}/bin/ot-rcp-uart-fc-ble-hci-bb-zb-ed-rx-off-pta-k32w061.map"

    arm-none-eabi-objcopy -v -O binary "${BUILD_DIR}/${app_folder_name}/bin/ot-rcp-uart-fc-ble-hci-bb-zb-ed-rx-off-pta-k32w061.elf" "${BUILD_DIR}/${app_folder_name}/bin/ot-rcp-uart-fc-ble-hci-bb-zb-ed-rx-off-pta-k32w061.bin"
    arm-none-eabi-objdump -d "${BUILD_DIR}/${app_folder_name}/bin/ot-rcp-uart-fc-ble-hci-bb-zb-ed-rx-off-pta-k32w061.elf" >"${BUILD_DIR}/${app_folder_name}/bin/ot-rcp-uart-fc-ble-hci-bb-zb-ed-rx-off-pta-k32w061.dis"

    if [ $? -eq 1 ]; then
        exit 1
    fi
}

create_directory_and_build()
{
    if [ "$1" == 'all' ]; then
        build_ot_rcp_only_uart_flow_control "$@"
        build_ot_rcp_only_spi "$@"
        build_ot_without_rcp_image "$@"
        build_ot_rcp_spi_ble_hci_bb_uart_fc "$@"
        build_ot_rcp_ble_hci_bb_single_uart_fc "$@"
        build_ot_cli_ftd_zb_ed_rx_off "$@"
        build_ot_rcp_uart_fc_zb_ed_rx_off "$@"
        build_ot_rcp_uart_fc_ble_hci_bb_zb_ed_rx_off "$@"
        build_ot_rcp_uart_fc_ble_hci_bb_zb_ed_rx_off_pta "$@"
        build_ot_rcp_only_uart_dma "$@"

    elif [ "$1" == 'ot_rcp_only_uart_flow_control' ]; then
        build_ot_rcp_only_uart_flow_control "$@"
    elif [ "$1" == 'ot_rcp_only_spi' ]; then
        build_ot_rcp_only_spi "$@"
    elif [ "$1" == 'ot_without_rcp_image' ]; then
        build_ot_without_rcp_image "$@"
    elif [ "$1" == 'ot_rcp_spi_ble_hci_bb_uart_fc' ]; then
        build_ot_rcp_spi_ble_hci_bb_uart_fc "$@"
    elif [ "$1" == 'ot_rcp_ble_hci_bb_single_uart_fc' ]; then
        build_ot_rcp_ble_hci_bb_single_uart_fc "$@"
    elif [ "$1" == 'ot_cli_ftd_zb_ed_rx_off' ]; then
        build_ot_cli_ftd_zb_ed_rx_off "$@"
    elif [ "$1" == 'ot_rcp_uart_fc_zb_ed_rx_off' ]; then
        build_ot_rcp_uart_fc_zb_ed_rx_off "$@"
    elif [ "$1" == 'ot_rcp_uart_fc_ble_hci_bb_zb_ed_rx_off' ]; then
        build_ot_rcp_uart_fc_ble_hci_bb_zb_ed_rx_off "$@"
    elif [ "$1" == 'ot_rcp_uart_fc_ble_hci_bb_zb_ed_rx_off_pta' ]; then
        build_ot_rcp_uart_fc_ble_hci_bb_zb_ed_rx_off_pta "$@"
    elif [ "$1" == 'ot_rcp_only_uart_dma' ]; then
        build_ot_rcp_only_uart_dma "$@"
    else
        echo >&2 "Unsupported action: $1. Supported: all, ot_rcp_only_uart_flow_control, ot_rcp_only_spi, ot_without_rcp_image, ot_rcp_spi_ble_hci_bb_uart_fc, ot_rcp_ble_hci_bb_single_uart_fc, ot_cli_ftd_zb_ed_rx_off, ot_rcp_uart_fc_zb_ed_rx_off, ot_rcp_uart_fc_ble_hci_bb_zb_ed_rx_off, ot_rcp_uart_fc_ble_hci_bb_zb_ed_rx_off_pta, ot_rcp_only_uart_dma"
        # 128 for Invalid arguments
        exit 128
    fi
}

build_ot_rcp_only_uart_dma()
{
    echo "Building OT RCP image with UART DMA..."
    app_folder_name="rcp_only_uart_dma"
    local options=("${OT_OPTIONS_RCP_ONLY_UART_DMA[@]}")
    options+=("${OT_OPTIONS[@]}")
    options+=("$@")
    options+=(" -DSDK_RELEASE=$SDK_RELEASE")
    build "${app_folder_name}" "${options[@]}"

    #Sign the image
    sign "${BUILD_DIR}/${app_folder_name}/bin"

    if [ $? -eq 1 ]; then
        exit 1
    fi

    echo "Building OT RCP image with UART DMA and PTA..."
    app_folder_name="rcp_only_uart_dma_pta"
    options+=("-DOT_BUILD_COEX=ON")
    options+=("-DOT_COMPILE_WARNING_AS_ERROR=OFF")
    build "${app_folder_name}" "${options[@]}"

    #Sign the image
    sign "${BUILD_DIR}/${app_folder_name}/bin"

    if [ $? -eq 1 ]; then
        exit 1
    fi
}

main()
{

    # Check if NXP_K32W0_SDK_ROOT contains a valid SDK
    #    if NXP_K32W0_SDK_ROOT is not defined
    #         We are using a github SDK
    #    if .gitmodules is found
    #         then NXP_K32W0_SDK_ROOT points to a cloned repository

    if [ -z "$NXP_K32W0_SDK_ROOT" ]; then
        export NXP_K32W0_SDK_ROOT="${OT_SRCDIR}/third_party/k32w061_sdk/repo/core"
        SDK_RELEASE=ON
    fi

    if [ -f $NXP_K32W0_SDK_ROOT/.gitmodules ]; then
        echo "Build using internal bitbucket"
        SDK_RELEASE=OFF
    fi

    echo "NXP_K32W0_SDK_ROOT set to " $NXP_K32W0_SDK_ROOT

    if [ -z "$NXP_SIGN_ADDITIONAL_ARGS" ]; then
        echo "NXP_SIGN_ADDITIONAL_ARGS not set. No additional args will be added to the sign command"
    else
        echo "NXP_SIGN_ADDITIONAL_ARGS set to " $NXP_SIGN_ADDITIONAL_ARGS
    fi

    if [ $# == 0 ]; then
        create_directory_and_build all $SDK_RELEASE "$@"
    else
        create_directory_and_build "$1" $SDK_RELEASE "$@"
    fi

}

main "$@"
