# Copyright (c) 2020 Project CHIP Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build_overrides/chip.gni")
import("//build_overrides/jlink.gni")
import("//build_overrides/mbedtls.gni")
import("//build_overrides/rt582_sdk.gni")

import("${chip_root}/src/lib/lib.gni")

declare_args() {
  # Location of the rt582 SDK.
  rt582_sdk_root = "${chip_root}/third_party/rafael/sdk"
  rt582_static_sdk_root = "${chip_root}/third_party/rafael/rt58x_sdk"
  sdk_support_root = "${chip_root}/third_party/rafael/matter_support"

  use_static_sdk_lib =  true
  # Build openthread with prebuilt rafael lib
  use_rafael_thread_lib = true
  enable_openthread_cli = true
  use_external_flash = false
}

assert(rt582_sdk_root != "", "rt582_sdk_root must be specified")

# Defines an rt582 SDK build target.
#
# Parameters:
#   rt582_sdk_root - The location of the erf32 SDK.
#   sources - The sources files to build.
template("rt582_sdk") {
  if (defined(invoker.rt582_sdk_root)) {
    rt582_sdk_root = invoker.rt582_sdk_root
  }

  assert(rt582_sdk_root != "", "rt582_sdk_root must be specified")

  sdk_target_name = target_name

  config("${sdk_target_name}_config") {
    include_dirs = []
    libs = []
    if (defined(invoker.include_dirs)) {
      include_dirs += invoker.include_dirs
    }
 
      # Treat these includes as system includes, so warnings in them are not fatal.
    _include_dirs = [
      "${chip_root}/third_party/openthread/ot-rt582/openthread/third_party/mbedtls/repo/include",
      "${chip_root}/examples/platform/rt582/config/",
      "${chip_root}/third_party/rafael",
    ]
    if(use_static_sdk_lib)
    {
      _include_dirs += [
        "${rt582_static_sdk_root}/Include",
      ]
    }
    else
    {
      _include_dirs += [
        "${rt582_sdk_root}",
        "${rt582_sdk_root}/CMSIS/Include",
        "${rt582_sdk_root}/Driver/Include",
        "${rt582_sdk_root}/Driver/Peripheral/Include",
        "${rt582_sdk_root}/Driver/PHY/include",
        "${rt582_sdk_root}/Driver/PHY/rt569mp/include",
        "${rt582_sdk_root}/Portable/bsp/Include",
        "${rt582_sdk_root}/Portable/System/Include",
        "${rt582_sdk_root}/Portable/Utility/include",
        "${rt582_sdk_root}/Utility/include",
        "${rt582_sdk_root}/RFB/include",
        "${rt582_sdk_root}/RUCI/include",
        "${rt582_sdk_root}/MemoryMgmt/Include",
        "${rt582_sdk_root}/Portable/freertos/repo/include",
        "${rt582_sdk_root}/Portable/freertos/repo/portable/GCC/ARM_CM3",

        "${rt582_sdk_root}/BLE/BLE_Host/Include",
        "${rt582_sdk_root}/BLE/BLE_Host_Internal/Include",
        "${rt582_sdk_root}/BLE/BLE_Service/BLE_Service_Common/Include",
        "${rt582_sdk_root}/BLE/BLE_Service/GAPS/Include",
        "${rt582_sdk_root}/BLE/BLE_Service/GATTS/Include",
        "${rt582_sdk_root}/BLE/BLE_Service/DIS/Include",
        "${rt582_sdk_root}/BLE/BLE_Service/Matter/Include",
        "${rt582_sdk_root}/BLE/HCI/Include",
        "${rt582_sdk_root}/BLE/Portable/Include",

        "${rt582_sdk_root}/BLE_App_Profile/Include",

        "${rt582_sdk_root}/RF_FW_Control_Task/Include",
        "${rt582_sdk_root}/RF_FW_Control_Task/Internal/Include",

        "${rt582_sdk_root}/FOTA/Include",

        #Hardware Crypto Engine Inclide Dirs
        "${chip_root}/third_party/mbedtls/repo/include/mbedtls",
        "${chip_root}/third_party/mbedtls/repo/library",
        "${rt582_sdk_root}/Crypto/Include",
      ]
    }

    # Note that we're setting the mbedTLS and PSA configuration files through a
    # define. This means the build system by default does not pick up changes in
    # the content of these, only when changing the filename itself.
    # To fix this, these files are also manually depended upon in the source set
    # declared in rt582_mbedtls_config further down this file.
    defines = [ "USE_FREERTOS" ]

    if (defined(invoker.enable_sleepy_device)) {
      if (invoker.enable_sleepy_device) {
        defines += [ "CHIP_DEVICE_CONFIG_ENABLE_SED=1" ]
      }
    }

    if (chip_build_libshell) {  # matter shell
      defines += [
        "ENABLE_CHIP_SHELL",
        "OPENTHREAD_CONFIG_CLI_TRANSPORT=OT_CLI_TRANSPORT_CONSOLE",
        "CHIP_DEVICE_CONFIG_THREAD_ENABLE_CLI=1",
      ]
    } else {
      if (enable_openthread_cli) {  # ot-cli only
        defines += [ "CHIP_DEVICE_CONFIG_THREAD_ENABLE_CLI=1" ]
      }
    }

    cflags = []
    foreach(include_dir, _include_dirs) {
      cflags += [ "-isystem" + rebase_path(include_dir, root_build_dir) ]
    }

    cflags += [
      "-Wno-unknown-pragmas",
      "-Wno-sign-compare",
      "-Wno-unused-function",
      "-Wno-unused-parameter",
      "-Wno-empty-body",
      "-w",
    ]

    if (defined(invoker.defines)) {
      defines += invoker.defines
    }
  }

  source_set(sdk_target_name) {
    sources = []
    if (defined(invoker.sources)) {
      sources += invoker.sources
    }

    # public_configs = [ ":${sdk_target_name}_config" ]
    public_deps=[":RT_SDK"]
  }

  static_library("RT_SDK"){
    sources =[]
    if (defined(invoker.sources)) {
      sources += invoker.sources
    }
    public_configs = [ ":${sdk_target_name}_config" ]

    if(use_static_sdk_lib)
    { 
      libs=["${chip_root}/third_party/rafael/rt58x_sdk/librt582sdk.a"] 
    }
    else
    {
      output_name = "librt582sdk"
      output_dir = "${root_out_dir}/lib"

      sources += [
        "${rt582_sdk_root}/Driver/Device/GCC/gcc_startup_cm3_mcu.S",
        "${rt582_sdk_root}/Driver/Device/system_cm3_mcu.c",

        "${rt582_sdk_root}/Driver/PHY/comm_subsystem_drv.c",
        "${rt582_sdk_root}/Driver/PHY/rf_common_init.c",
        "${rt582_sdk_root}/Driver/PHY/rf_mcu.c",
        "${rt582_sdk_root}/Driver/PHY/rf_mcu_ahb.c",
        "${rt582_sdk_root}/Driver/PHY/rt569mp/rt569mp_fw.c",
        "${rt582_sdk_root}/Driver/PHY/rt569mp/rt569mp_init.c",
        "${rt582_sdk_root}/Driver/Peripheral/dma.c",
        "${rt582_sdk_root}/Driver/Peripheral/flashctl.c",
        "${rt582_sdk_root}/Driver/Peripheral/flashds.c",
        "${rt582_sdk_root}/Driver/Peripheral/Include/flashctl.h",
        "${rt582_sdk_root}/Driver/Peripheral/gpio.c",
        "${rt582_sdk_root}/Driver/Peripheral/mp_sector.c",
        "${rt582_sdk_root}/Driver/Peripheral/sysctrl.c",
        "${rt582_sdk_root}/Driver/Peripheral/sysfun.c",
        "${rt582_sdk_root}/Driver/Peripheral/timer.c",
        "${rt582_sdk_root}/Driver/Peripheral/uart_retarget.c",
        "${rt582_sdk_root}/Driver/Peripheral/wdt.c",
        "${rt582_sdk_root}/Driver/Peripheral/lpm.c",
        "${rt582_sdk_root}/Portable/Utility/util.c",
        "${rt582_sdk_root}/Portable/Utility/util_log.c",
        "${rt582_sdk_root}/Portable/Utility/util_printf.c",
        "${rt582_sdk_root}/Portable/Utility/util_string.c",
        "${rt582_sdk_root}/Portable/bsp/bsp.c",
        "${rt582_sdk_root}/Portable/bsp/bsp_button.c",
        "${rt582_sdk_root}/Portable/bsp/bsp_led.c",
        "${rt582_sdk_root}/Portable/bsp/bsp_uart_drv.c",
        "${rt582_sdk_root}/RFB/rfb.c",
        "${rt582_sdk_root}/RFB/rfb_comm_15p4Mac.c",
        "${rt582_sdk_root}/RFB/rfb_comm_common.c",
        "${rt582_sdk_root}/RFB/rfb_comm_isr.c",
        "${rt582_sdk_root}/RFB/rfb_port.c",
        
        #BLE 
        "${rt582_sdk_root}/BLE/BLE_Host/ble_host_ref.c",
        "${rt582_sdk_root}/BLE/BLE_Host/ble_cmd_advertising.c",
        "${rt582_sdk_root}/BLE/BLE_Host/ble_cmd_att_gatt.c",
        "${rt582_sdk_root}/BLE/BLE_Host/ble_cmd_common.c",
        "${rt582_sdk_root}/BLE/BLE_Host/ble_cmd_gap.c",
        "${rt582_sdk_root}/BLE/BLE_Host/ble_cmd_scan.c",
        "${rt582_sdk_root}/BLE/BLE_Host/ble_cmd_security_manager.c",
        "${rt582_sdk_root}/BLE/BLE_Host/ble_cmd_privacy.c",

        "${rt582_sdk_root}/BLE/BLE_Host_Internal/att.c",
        "${rt582_sdk_root}/BLE/BLE_Host_Internal/ble_advertising_api.c",
        "${rt582_sdk_root}/BLE/BLE_Host_Internal/ble_api.c",
        "${rt582_sdk_root}/BLE/BLE_Host_Internal/ble_api_handler.c",
        "${rt582_sdk_root}/BLE/BLE_Host_Internal/ble_att_gatt_api.c",
        "${rt582_sdk_root}/BLE/BLE_Host_Internal/ble_bonding_storage.c",
        "${rt582_sdk_root}/BLE/BLE_Host_Internal/ble_common_api.c",
        "${rt582_sdk_root}/BLE/BLE_Host_Internal/ble_event_app.c",
        "${rt582_sdk_root}/BLE/BLE_Host_Internal/ble_event_module.c",
        "${rt582_sdk_root}/BLE/BLE_Host_Internal/ble_gap_api.c",
        "${rt582_sdk_root}/BLE/BLE_Host_Internal/ble_scan_api.c",
        "${rt582_sdk_root}/BLE/BLE_Host_Internal/ble_security_manager_api.c",
        "${rt582_sdk_root}/BLE/BLE_Host_Internal/host_management.c",
        "${rt582_sdk_root}/BLE/BLE_Host_Internal/l2cap.c",
        "${rt582_sdk_root}/BLE/BLE_Host_Internal/smp.c",
        "${rt582_sdk_root}/BLE/BLE_Host_Internal/ble_privacy.c",
        "${rt582_sdk_root}/BLE/BLE_Host_Internal/ble_memory.c",

        "${rt582_sdk_root}/BLE/HCI/hci_cmd_vendor.c",
        "${rt582_sdk_root}/BLE/HCI/hci_cmd_controller.c",
        "${rt582_sdk_root}/BLE/HCI/hci_cmd_advertising.c",
        "${rt582_sdk_root}/BLE/HCI/hci_cmd_scan.c",
        "${rt582_sdk_root}/BLE/HCI/hci_cmd_security.c",
        "${rt582_sdk_root}/BLE/HCI/hci_cmd_connect.c",
        "${rt582_sdk_root}/BLE/HCI/hci_cmd_connect_cte.c",
        "${rt582_sdk_root}/BLE/HCI/hci_cmd_privacy.c",
        "${rt582_sdk_root}/BLE/HCI/hci_event.c",

        "${rt582_sdk_root}/BLE/BLE_Service/BLE_Service_Common/ble_service_common.c",
        "${rt582_sdk_root}/BLE/BLE_Service/GAPS/ble_service_gaps.c",
        "${rt582_sdk_root}/BLE/BLE_Service/GATTS/ble_service_gatts.c",
        "${rt582_sdk_root}/BLE/BLE_Service/DIS/ble_service_dis.c",
        "${rt582_sdk_root}/BLE/BLE_Service/Matter/ble_service_matter.c",

        "${rt582_sdk_root}/BLE/Portable/task_ble_app.c",
        "${rt582_sdk_root}/BLE/Portable/task_host.c",

        "${rt582_sdk_root}/RF_FW_Control_Task/Internal/rf_fw_ctrl_init.c",
        "${rt582_sdk_root}/RF_FW_Control_Task/Internal/rf_fw_ctrl_rx.c",
        "${rt582_sdk_root}/RF_FW_Control_Task/Internal/rf_fw_ctrl_tx.c",

        "${rt582_sdk_root}/BLE_App_Profile/ble_profile_app.c",
        "${rt582_sdk_root}/BLE_App_Profile/ble_profile_def.c",

        "${rt582_sdk_root}/Portable/System/sys_arch.c",

        #Crypto Engine
        "${rt582_sdk_root}/Crypto/crypto.c",
        "${rt582_sdk_root}/Crypto/crypto_util.c",
        "${rt582_sdk_root}/Crypto/sha256.c",
        "${rt582_sdk_root}/Crypto/aes.c",
        "${rt582_sdk_root}/Crypto/hw_ecdh.c",
        "${rt582_sdk_root}/Crypto/hw_ecdsa.c",
        "${rt582_sdk_root}/Crypto/test/tst_ecdh.c",
        "${rt582_sdk_root}/Crypto/test/tst_sha256.c",
        "${rt582_sdk_root}/Crypto/test/tst_ecdsa.c",
      ]
    }
  }
}
